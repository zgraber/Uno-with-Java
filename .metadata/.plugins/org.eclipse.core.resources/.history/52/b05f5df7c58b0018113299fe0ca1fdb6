package uno.game;
import java.util.ArrayList;

import uno.cards.ActionCard;
import uno.cards.Deck;
import uno.cards.NumberCard;
import uno.cards.UNOCard;
import uno.player.Player;
import uno.resources.Constants;

public class Game {
	public static final int FORWARD = 1;
	public static final int BACKWARD = -1; 
	
	private ArrayList<Player> players;
	private Deck gameDeck;
	private UNOCard lastCard;
	private int gameDirection;
	private int currentPlayerNum;

	//Constructor that instantiates the deck and player list
	public Game() {
		// TODO Auto-generated constructor stub
		players = new ArrayList<Player>();
		gameDeck = new Deck();
	}
	
	//The Public method that starts the game. Should be called from main method
	public void startGame() {
		this.initGame();
		this.gameLoop();
	}
	
	//Initializes the game. Makes new players, makes new random deck, deals player hands, and draws first card
	private void initGame() {
		//Scanner scan = new Scanner(System.in);
		gameDeck.addCards();
		gameDirection = FORWARD;
		currentPlayerNum = 0;
		
		System.out.println("Welcome To UNO!!!\n");
		System.out.print("How many people are playing?: ");
		int numPlayers = Constants.SCAN.nextInt();
		Constants.SCAN.nextLine();
		for(int i = 1; i <= numPlayers; i++) {
			System.out.print("Player " + i + " Name: ");
			
			String name = Constants.SCAN.nextLine();
			Player player = new Player(name);
			player.makeHand(gameDeck);
			players.add(player);
			
		}
		lastCard = gameDeck.draw();
	}
	
	
	//Runs the main game loop cycle till someone wins
	private void gameLoop() {
		while (!isGameCompleted()) {
			takeTurn();
			moveToNextPlayer();
		}
	}
	
	//Runs all the logic for taking the current player's turn
	private void takeTurn() {
		UNOCard playerCard;
		int cardNum = -1;
		
		System.out.println("\nLast Card Played: \n" + lastCard.getName());
		
		System.out.println("Player " + players.get(currentPlayerNum).getPlayerName() + " take your turn");
		players.get(currentPlayerNum).printHand();
		System.out.print("What number card to play: ");
		
		do {
			if (Constants.SCAN.hasNextInt()) {
				cardNum = Constants.SCAN.nextInt();
			}
			playerCard = players.get(currentPlayerNum).getCardByNum(cardNum);
		} while(!isValidCard(playerCard));
		if(playerCard instanceof ActionCard) processActionCard((ActionCard)playerCard);
		lastCard = playerCard;
		players.get(currentPlayerNum).removeCardFromHand(cardNum);
	}
	
	//Increments currentPlayerNum such that it loops around at the end or beginning of the list of players
	private void moveToNextPlayer() {
		currentPlayerNum += gameDirection;
		if(currentPlayerNum > players.size()-1) {
			currentPlayerNum = 0;
		} else if (currentPlayerNum < 0){
			currentPlayerNum = players.size() - 1;
		}
	}
	
	//Returns a boolean for whether the game is completed or not
	private boolean isGameCompleted() {
		boolean returnBool = false;
		for(Player p : players) {
			if (p.getHandSize() == 0) {
				returnBool = true;
			}
		}
		
		return returnBool;
	}
	
	//Determines if the card a player is playing can be played
	private boolean isValidCard(UNOCard card) {
		if (card.getColor() == lastCard.getColor()) {
			return true;
		}
		
		if(card instanceof NumberCard && lastCard instanceof NumberCard) {
			if ( ((NumberCard)card).getNumber() == ((NumberCard)lastCard).getNumber()) 
				return true;
		}
		
		System.out.println("Invalid Card. Try Again:");
		return false;
	}
	
	private void processActionCard(ActionCard card) {
		
	}

}
