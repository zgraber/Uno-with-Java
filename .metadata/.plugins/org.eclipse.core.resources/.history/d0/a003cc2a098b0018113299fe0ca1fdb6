package uno.game;
import java.util.ArrayList;
import java.util.Scanner;

import uno.cards.Deck;
import uno.cards.NumberCard;
import uno.cards.UNOCard;
import uno.player.Player;

public class Game {
	public static final int FORWARD = 1;
	public static final int BACKWARD = -1;	
	
	private ArrayList<Player> players;
	private Deck gameDeck;
	private UNOCard lastCard;
	private int gameDirection;
	private int currentPlayer;

	public Game() {
		// TODO Auto-generated constructor stub
		players = new ArrayList<Player>();
		gameDeck = new Deck();
	}
	
	public void startGame() {
		this.initGame();
		this.gameLoop();
	}
	
	private void initGame() {
		Scanner scan = new Scanner(System.in);
		gameDeck.addCards();
		gameDirection = FORWARD;
		currentPlayer = 0;
		
		System.out.println("Welcome To UNO!!!\n");
		System.out.print("How many people are playing?: ");
		int numPlayers = scan.nextInt();
		scan.nextLine();
		for(int i = 1; i <= numPlayers; i++) {
			System.out.print("Player " + i + " Name: ");
			
			String name = scan.nextLine();
			Player player = new Player(name);
			player.makeHand(gameDeck);
			players.add(player);
			
		}
		lastCard = gameDeck.draw();
		System.out.println("First Card: \n" + lastCard.getName());
		scan.close();
	}
	
	
	private void gameLoop() {
		//while (!isGameCompleted()) {
			takeTurn();
			moveToNextPlayer();
		//}
	}
	
	private void takeTurn() {
		System.out.println("Player " + players.get(currentPlayer).getPlayerName() + " take your turn");
		
	}
	
	private void moveToNextPlayer() {
		currentPlayer += gameDirection;
		if(currentPlayer > players.size()) {
			currentPlayer = 0;
		} else if (currentPlayer < 0){
			currentPlayer = players.size() - 1;
		}
	}
	
	private boolean isGameCompleted() {
		boolean returnBool = false;
		for(Player p : players) {
			if (p.getHandSize() == 0) {
				returnBool = true;
			}
		}
		
		return returnBool;
	}
	
	private boolean isValidCard(UNOCard card) {
		if (card.getColor() == lastCard.getColor()) {
			return true;
		}
		
		if(card instanceof NumberCard) {
			((NumberCard) card).getNumber();
		}
		
	}

}
